/*========================================================================
  Copyright (c) 2023 Yun-Rong Lauren Luo, University of Michigan
  
  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:
  
  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.
  
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
  ========================================================================*/


#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fstream>
#include <vector>
#include <string>
#include <iostream>
#include <cassert>

#include "report.h"
#include "clausal.hh"
#include "writer.hh"
#include "counters.h"

using namespace std;

enum    QType                      {UNIVERSAL=0,EXISTENTIAL=1,RANDOM=2};
enum    FType                      {CNF=0, WCNF=1, SDIMACS=2};
typedef vector<uint>               Vars;
typedef pair<QType,Vars>           QLevel;
typedef vector<QLevel>             Prefix;

void usage(const char *name) {
    lprintf("Usage: %s [-h] FORMULA.sdimacs UP.nnf LOW.nnf FORMULA.prob \n", name);
    lprintf("  -h        Print this information\n");
    lprintf("FORMULA.sdimacs    Input SSAT formula\n");
    lprintf("UP.nnf             Upper trace generated by SharpSSAT\n");
    lprintf("LOW.nnf            Lower trace generated by SharpSSAT\n");
    lprintf("FORMULA.prob       Maximum satisfying probability computed by SharpSSAT\n");
    exit(0);
}

class SSAT_Header
{
public:
    SSAT_Header(ifstream& ssat_file)
    {
        int lit, var;
        double prob;
        char c;
        unsigned max_ignore = 1000000;
        string idstring;
        unsigned vars_added = 0;
        unsigned qlev = 0;
        Vars vars;

        while (ssat_file >> c && c != 'p')
          ssat_file.ignore(max_ignore, '\n');
        if (!(ssat_file >> idstring && idstring == "cnf" && ssat_file >> nVars
            && ssat_file >> nCls)) {
          cerr << "Invalid CNF(WCNF) file" << endl;
          exit(0);
        }

        var2Prob_.clear();
        var2Prob_.resize(nVars + 1, -1);
        var2Q_.clear();
        var2Q_.resize(nVars + 1, EXISTENTIAL);
        var2Lev_.clear();
        var2Lev_.resize(nVars+1, -1);

        while ((ssat_file >> c) && vars_added < nVars)
        {
            vars.clear();
            QType qt;
            if(c=='r'){
              qt = RANDOM;
              ssat_file >> prob;
              while ( (ssat_file >> var) && var!=0 ){
                vars.push_back(var);
                var2Prob_[var] = prob;
                var2Q_[var] = qt;
                orderedVar_.push_back(var);
              }
            }
            else{
              qt = EXISTENTIAL;
              while( (ssat_file >> var) && var!=0  ){
                vars.push_back(var);
                var2Q_[var] = qt;
                orderedVar_.push_back(var);
              }
            }
            if(prefix_.empty()) {
              prefix_.push_back(QLevel(qt, vars));
              for(auto& v : vars) var2Lev_[v] = qlev;
            }
            else{
              QLevel& last = prefix_.back();
              if(last.first!=qt){
                prefix_.push_back( QLevel(qt, vars) );
                ++qlev;
                for(auto& v : vars) var2Lev_[v] = qlev;
              }
              else{
                last.second.insert(last.second.end(), vars.begin(), vars.end());
                for(auto& v : vars) var2Lev_[v] = qlev;
              }
            }
            ++vars_added;
        }
    }

    unsigned int nVars, nCls;
    Prefix          prefix_;
    FType           f_type_;
    vector<double>  var2Prob_;   // -1 for indicator variable (only occurs in WMC)
    vector<QType>   var2Q_;
    vector<int>     var2Lev_;
    vector<size_t>  orderedVar_; // ordered var follows the prefix, used when certification
};

static int run( ifstream & ssat_file, ifstream & upNNF_file, ifstream & lowNNF_file, ifstream & prob_file) {
    SSAT_Header ssat_header(ssat_file);
    ssat_file.close();

    double prob; 
    assert( prob_file >> prob ); 
    prob_file.close();
}


int main(int argc, char *const argv[]) {
    int c;
    while ((c = getopt(argc, argv, "h")) != -1) {
	switch (c) {
	case 'h':
	    usage(argv[0]);
	    break;
	case '?':
	default:
	    lprintf("Unknown option '%c'\n", c);
	    usage(argv[0]);
	}
    }

    int argi = optind;
    if (argi >= argc) {
	lprintf("Name of input SDIMACS file required\n");
	usage(argv[0]);
    }
    ifstream ssat_file(argv[argi]);
    if ( !ssat_file ) {
	lprintf("Can't open '%s'\n", argv[argi]);
	exit(1);
    }

    argi++;
    if (argi >= argc) {
	lprintf("Name of input UPPER TRACE file required\n");
	usage(argv[0]);
    }
    ifstream upNNF_file(argv[argi]);
    if ( !upNNF_file ) {
	fprintf(stderr, "Can't open '%s'\n", argv[argi]);
	exit(1);
    }

    argi++;
    if (argi >= argc) {
	lprintf("Name of input LOWER TRACE file required\n");
	usage(argv[0]);
    }
    ifstream lowNNF_file(argv[argi]);
    if ( !lowNNF_file ) {
	fprintf(stderr, "Can't open '%s'\n", argv[argi]);
	exit(1);
    }

    argi++;
    if (argi >= argc) {
	lprintf("Name of input PROB file required\n");
	usage(argv[0]);
    }
    ifstream prob_file(argv[argi]);
    if ( !prob_file ) {
	fprintf(stderr, "Can't open '%s'\n", argv[argi]);
	exit(1);
    }

    int return_code = 0;
    try {
	return_code = run(ssat_file, upNNF_file, lowNNF_file, prob_file);
    } catch (const std::bad_alloc &e) {
	err(true, "Memory allocation error\n");
    }
    
    return return_code;
}

